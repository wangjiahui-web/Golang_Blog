// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"blogProject/gen/model"
)

func newEducationExperience(db *gorm.DB, opts ...gen.DOOption) educationExperience {
	_educationExperience := educationExperience{}

	_educationExperience.educationExperienceDo.UseDB(db, opts...)
	_educationExperience.educationExperienceDo.UseModel(&model.EducationExperience{})

	tableName := _educationExperience.educationExperienceDo.TableName()
	_educationExperience.ALL = field.NewAsterisk(tableName)
	_educationExperience.ID = field.NewInt64(tableName, "id")
	_educationExperience.AdminID = field.NewInt64(tableName, "admin_id")
	_educationExperience.SchoolName = field.NewString(tableName, "school_name")
	_educationExperience.StartDate = field.NewTime(tableName, "start_date")
	_educationExperience.Major = field.NewString(tableName, "major")
	_educationExperience.EndDate = field.NewString(tableName, "end_date")
	_educationExperience.Courses = field.NewString(tableName, "courses")

	_educationExperience.fillFieldMap()

	return _educationExperience
}

type educationExperience struct {
	educationExperienceDo

	ALL        field.Asterisk
	ID         field.Int64  // 教育经历 ID
	AdminID    field.Int64  // 管理员 ID
	SchoolName field.String // 学校名称
	StartDate  field.Time   // 入学日期，日期形式，便于排序
	Major      field.String // 在校专业
	EndDate    field.String // 毕业日期，字符串形式，容易处理 "至今"
	Courses    field.String // 在校期间学习的专业课程

	fieldMap map[string]field.Expr
}

func (e educationExperience) Table(newTableName string) *educationExperience {
	e.educationExperienceDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e educationExperience) As(alias string) *educationExperience {
	e.educationExperienceDo.DO = *(e.educationExperienceDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *educationExperience) updateTableName(table string) *educationExperience {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.AdminID = field.NewInt64(table, "admin_id")
	e.SchoolName = field.NewString(table, "school_name")
	e.StartDate = field.NewTime(table, "start_date")
	e.Major = field.NewString(table, "major")
	e.EndDate = field.NewString(table, "end_date")
	e.Courses = field.NewString(table, "courses")

	e.fillFieldMap()

	return e
}

func (e *educationExperience) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *educationExperience) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["admin_id"] = e.AdminID
	e.fieldMap["school_name"] = e.SchoolName
	e.fieldMap["start_date"] = e.StartDate
	e.fieldMap["major"] = e.Major
	e.fieldMap["end_date"] = e.EndDate
	e.fieldMap["courses"] = e.Courses
}

func (e educationExperience) clone(db *gorm.DB) educationExperience {
	e.educationExperienceDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e educationExperience) replaceDB(db *gorm.DB) educationExperience {
	e.educationExperienceDo.ReplaceDB(db)
	return e
}

type educationExperienceDo struct{ gen.DO }

func (e educationExperienceDo) Debug() *educationExperienceDo {
	return e.withDO(e.DO.Debug())
}

func (e educationExperienceDo) WithContext(ctx context.Context) *educationExperienceDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e educationExperienceDo) ReadDB() *educationExperienceDo {
	return e.Clauses(dbresolver.Read)
}

func (e educationExperienceDo) WriteDB() *educationExperienceDo {
	return e.Clauses(dbresolver.Write)
}

func (e educationExperienceDo) Session(config *gorm.Session) *educationExperienceDo {
	return e.withDO(e.DO.Session(config))
}

func (e educationExperienceDo) Clauses(conds ...clause.Expression) *educationExperienceDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e educationExperienceDo) Returning(value interface{}, columns ...string) *educationExperienceDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e educationExperienceDo) Not(conds ...gen.Condition) *educationExperienceDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e educationExperienceDo) Or(conds ...gen.Condition) *educationExperienceDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e educationExperienceDo) Select(conds ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e educationExperienceDo) Where(conds ...gen.Condition) *educationExperienceDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e educationExperienceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *educationExperienceDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e educationExperienceDo) Order(conds ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e educationExperienceDo) Distinct(cols ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e educationExperienceDo) Omit(cols ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e educationExperienceDo) Join(table schema.Tabler, on ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e educationExperienceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e educationExperienceDo) RightJoin(table schema.Tabler, on ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e educationExperienceDo) Group(cols ...field.Expr) *educationExperienceDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e educationExperienceDo) Having(conds ...gen.Condition) *educationExperienceDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e educationExperienceDo) Limit(limit int) *educationExperienceDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e educationExperienceDo) Offset(offset int) *educationExperienceDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e educationExperienceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *educationExperienceDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e educationExperienceDo) Unscoped() *educationExperienceDo {
	return e.withDO(e.DO.Unscoped())
}

func (e educationExperienceDo) Create(values ...*model.EducationExperience) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e educationExperienceDo) CreateInBatches(values []*model.EducationExperience, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e educationExperienceDo) Save(values ...*model.EducationExperience) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e educationExperienceDo) First() (*model.EducationExperience, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EducationExperience), nil
	}
}

func (e educationExperienceDo) Take() (*model.EducationExperience, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EducationExperience), nil
	}
}

func (e educationExperienceDo) Last() (*model.EducationExperience, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EducationExperience), nil
	}
}

func (e educationExperienceDo) Find() ([]*model.EducationExperience, error) {
	result, err := e.DO.Find()
	return result.([]*model.EducationExperience), err
}

func (e educationExperienceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EducationExperience, err error) {
	buf := make([]*model.EducationExperience, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e educationExperienceDo) FindInBatches(result *[]*model.EducationExperience, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e educationExperienceDo) Attrs(attrs ...field.AssignExpr) *educationExperienceDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e educationExperienceDo) Assign(attrs ...field.AssignExpr) *educationExperienceDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e educationExperienceDo) Joins(fields ...field.RelationField) *educationExperienceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e educationExperienceDo) Preload(fields ...field.RelationField) *educationExperienceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e educationExperienceDo) FirstOrInit() (*model.EducationExperience, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EducationExperience), nil
	}
}

func (e educationExperienceDo) FirstOrCreate() (*model.EducationExperience, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EducationExperience), nil
	}
}

func (e educationExperienceDo) FindByPage(offset int, limit int) (result []*model.EducationExperience, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e educationExperienceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e educationExperienceDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e educationExperienceDo) Delete(models ...*model.EducationExperience) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *educationExperienceDo) withDO(do gen.Dao) *educationExperienceDo {
	e.DO = *do.(*gen.DO)
	return e
}
