// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	Admin               *admin
	Blog                *blog
	Category            *category
	Comment             *comment
	EducationExperience *educationExperience
	LeaveWord           *leaveWord
	Picture             *picture
	ProjectExperience   *projectExperience
	User                *user
	WorkExperience      *workExperience
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Blog = &Q.Blog
	Category = &Q.Category
	Comment = &Q.Comment
	EducationExperience = &Q.EducationExperience
	LeaveWord = &Q.LeaveWord
	Picture = &Q.Picture
	ProjectExperience = &Q.ProjectExperience
	User = &Q.User
	WorkExperience = &Q.WorkExperience
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		Admin:               newAdmin(db, opts...),
		Blog:                newBlog(db, opts...),
		Category:            newCategory(db, opts...),
		Comment:             newComment(db, opts...),
		EducationExperience: newEducationExperience(db, opts...),
		LeaveWord:           newLeaveWord(db, opts...),
		Picture:             newPicture(db, opts...),
		ProjectExperience:   newProjectExperience(db, opts...),
		User:                newUser(db, opts...),
		WorkExperience:      newWorkExperience(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin               admin
	Blog                blog
	Category            category
	Comment             comment
	EducationExperience educationExperience
	LeaveWord           leaveWord
	Picture             picture
	ProjectExperience   projectExperience
	User                user
	WorkExperience      workExperience
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Admin:               q.Admin.clone(db),
		Blog:                q.Blog.clone(db),
		Category:            q.Category.clone(db),
		Comment:             q.Comment.clone(db),
		EducationExperience: q.EducationExperience.clone(db),
		LeaveWord:           q.LeaveWord.clone(db),
		Picture:             q.Picture.clone(db),
		ProjectExperience:   q.ProjectExperience.clone(db),
		User:                q.User.clone(db),
		WorkExperience:      q.WorkExperience.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Admin:               q.Admin.replaceDB(db),
		Blog:                q.Blog.replaceDB(db),
		Category:            q.Category.replaceDB(db),
		Comment:             q.Comment.replaceDB(db),
		EducationExperience: q.EducationExperience.replaceDB(db),
		LeaveWord:           q.LeaveWord.replaceDB(db),
		Picture:             q.Picture.replaceDB(db),
		ProjectExperience:   q.ProjectExperience.replaceDB(db),
		User:                q.User.replaceDB(db),
		WorkExperience:      q.WorkExperience.replaceDB(db),
	}
}

type queryCtx struct {
	Admin               *adminDo
	Blog                *blogDo
	Category            *categoryDo
	Comment             *commentDo
	EducationExperience *educationExperienceDo
	LeaveWord           *leaveWordDo
	Picture             *pictureDo
	ProjectExperience   *projectExperienceDo
	User                *userDo
	WorkExperience      *workExperienceDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:               q.Admin.WithContext(ctx),
		Blog:                q.Blog.WithContext(ctx),
		Category:            q.Category.WithContext(ctx),
		Comment:             q.Comment.WithContext(ctx),
		EducationExperience: q.EducationExperience.WithContext(ctx),
		LeaveWord:           q.LeaveWord.WithContext(ctx),
		Picture:             q.Picture.WithContext(ctx),
		ProjectExperience:   q.ProjectExperience.WithContext(ctx),
		User:                q.User.WithContext(ctx),
		WorkExperience:      q.WorkExperience.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
