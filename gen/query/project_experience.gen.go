// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"blogProject/gen/model"
)

func newProjectExperience(db *gorm.DB, opts ...gen.DOOption) projectExperience {
	_projectExperience := projectExperience{}

	_projectExperience.projectExperienceDo.UseDB(db, opts...)
	_projectExperience.projectExperienceDo.UseModel(&model.ProjectExperience{})

	tableName := _projectExperience.projectExperienceDo.TableName()
	_projectExperience.ALL = field.NewAsterisk(tableName)
	_projectExperience.ID = field.NewInt32(tableName, "id")
	_projectExperience.AdminID = field.NewInt64(tableName, "admin_id")
	_projectExperience.ProjectName = field.NewString(tableName, "project_name")
	_projectExperience.ProjectDescription = field.NewString(tableName, "project_description")
	_projectExperience.ProjectDate = field.NewTime(tableName, "project_date")

	_projectExperience.fillFieldMap()

	return _projectExperience
}

type projectExperience struct {
	projectExperienceDo

	ALL                field.Asterisk
	ID                 field.Int32  // 项目 ID，自增 ID
	AdminID            field.Int64  // 管理员ID
	ProjectName        field.String // 项目名称
	ProjectDescription field.String // 项目描述
	ProjectDate        field.Time   // 项目日期

	fieldMap map[string]field.Expr
}

func (p projectExperience) Table(newTableName string) *projectExperience {
	p.projectExperienceDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectExperience) As(alias string) *projectExperience {
	p.projectExperienceDo.DO = *(p.projectExperienceDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectExperience) updateTableName(table string) *projectExperience {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.AdminID = field.NewInt64(table, "admin_id")
	p.ProjectName = field.NewString(table, "project_name")
	p.ProjectDescription = field.NewString(table, "project_description")
	p.ProjectDate = field.NewTime(table, "project_date")

	p.fillFieldMap()

	return p
}

func (p *projectExperience) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectExperience) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["admin_id"] = p.AdminID
	p.fieldMap["project_name"] = p.ProjectName
	p.fieldMap["project_description"] = p.ProjectDescription
	p.fieldMap["project_date"] = p.ProjectDate
}

func (p projectExperience) clone(db *gorm.DB) projectExperience {
	p.projectExperienceDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectExperience) replaceDB(db *gorm.DB) projectExperience {
	p.projectExperienceDo.ReplaceDB(db)
	return p
}

type projectExperienceDo struct{ gen.DO }

func (p projectExperienceDo) Debug() *projectExperienceDo {
	return p.withDO(p.DO.Debug())
}

func (p projectExperienceDo) WithContext(ctx context.Context) *projectExperienceDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectExperienceDo) ReadDB() *projectExperienceDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectExperienceDo) WriteDB() *projectExperienceDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectExperienceDo) Session(config *gorm.Session) *projectExperienceDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectExperienceDo) Clauses(conds ...clause.Expression) *projectExperienceDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectExperienceDo) Returning(value interface{}, columns ...string) *projectExperienceDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectExperienceDo) Not(conds ...gen.Condition) *projectExperienceDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectExperienceDo) Or(conds ...gen.Condition) *projectExperienceDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectExperienceDo) Select(conds ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectExperienceDo) Where(conds ...gen.Condition) *projectExperienceDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectExperienceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *projectExperienceDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p projectExperienceDo) Order(conds ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectExperienceDo) Distinct(cols ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectExperienceDo) Omit(cols ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectExperienceDo) Join(table schema.Tabler, on ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectExperienceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectExperienceDo) RightJoin(table schema.Tabler, on ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectExperienceDo) Group(cols ...field.Expr) *projectExperienceDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectExperienceDo) Having(conds ...gen.Condition) *projectExperienceDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectExperienceDo) Limit(limit int) *projectExperienceDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectExperienceDo) Offset(offset int) *projectExperienceDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectExperienceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *projectExperienceDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectExperienceDo) Unscoped() *projectExperienceDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectExperienceDo) Create(values ...*model.ProjectExperience) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectExperienceDo) CreateInBatches(values []*model.ProjectExperience, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectExperienceDo) Save(values ...*model.ProjectExperience) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectExperienceDo) First() (*model.ProjectExperience, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectExperience), nil
	}
}

func (p projectExperienceDo) Take() (*model.ProjectExperience, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectExperience), nil
	}
}

func (p projectExperienceDo) Last() (*model.ProjectExperience, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectExperience), nil
	}
}

func (p projectExperienceDo) Find() ([]*model.ProjectExperience, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectExperience), err
}

func (p projectExperienceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectExperience, err error) {
	buf := make([]*model.ProjectExperience, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectExperienceDo) FindInBatches(result *[]*model.ProjectExperience, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectExperienceDo) Attrs(attrs ...field.AssignExpr) *projectExperienceDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectExperienceDo) Assign(attrs ...field.AssignExpr) *projectExperienceDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectExperienceDo) Joins(fields ...field.RelationField) *projectExperienceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectExperienceDo) Preload(fields ...field.RelationField) *projectExperienceDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectExperienceDo) FirstOrInit() (*model.ProjectExperience, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectExperience), nil
	}
}

func (p projectExperienceDo) FirstOrCreate() (*model.ProjectExperience, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectExperience), nil
	}
}

func (p projectExperienceDo) FindByPage(offset int, limit int) (result []*model.ProjectExperience, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectExperienceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectExperienceDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectExperienceDo) Delete(models ...*model.ProjectExperience) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectExperienceDo) withDO(do gen.Dao) *projectExperienceDo {
	p.DO = *do.(*gen.DO)
	return p
}
